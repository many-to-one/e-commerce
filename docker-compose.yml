# services:
#   db:
#     image: postgres:latest
#     container_name: shopdb
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "${DB_PORT}:${DB_PORT}"
#     environment:
#       POSTGRES_NAME: ${DB_NAME}
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       PGPORT: ${DB_PORT}
#       PGHOST: ${DB_HOST}
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
#       interval: 5s
#       retries: 5
#       start_period: 1s
#       timeout: 10s
#   web:
#     build:
#     context: ./server
#     container_name: eshopweb
#     # command: python manage.py runserver 0.0.0.0:${DJANGO_PORT}
#     command: sh -c "uvicorn backend.asgi:application --host 0.0.0.0 --port ${DJANGO_PORT} --reload"
#     volumes:
#       - .:/app
#     ports:
#       - "${DJANGO_PORT}:${DJANGO_PORT}"
#     environment:
#       POSTGRES_NAME: ${DB_NAME}
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       CELERY_BROKER_URL: redis://redis:6379/0
#       CELERY_RESULT_BACKEND: redis://redis:6379/0
#     depends_on:
#       - redis
#     env_file:
#     - .env


#   redis:
#     image: redis:latest
#     container_name: eshop_redis
#     restart: always
#     ports:
#       - "6380:6379"


#   celery:
#     build:
#     context: ./server
#     container_name: backend_celery_worker
#     command: celery -A backend worker --loglevel=info  # Celery worker command
#     volumes:
#       - .:/app
#     depends_on:
#       - web
#       - redis
#     environment:
#       - CELERY_BROKER_URL=redis://redis:6379/0
#       - CELERY_RESULT_BACKEND=redis://redis:6379/0
#       - PGNAME=${DB_NAME}
#       - PGUSER=${DB_USER}
#       - PGPASSWORD=${DB_PASSWORD}
#       - PGPORT=${DB_PORT}
#       - PGHOST=${DB_HOST}


#   celery-beat:
#     build:
#     context: ./server
#     container_name: backend_celery_beat
#     command: celery -A backend beat --loglevel=info  # Celery beat command (optional)
#     volumes:
#       - .:/app
#     depends_on:
#       - web
#       - redis


#   master:
#       image: locustio/locust:master
#       ports:
#        - "8089:8089"
#       volumes:
#         - ./locust:/mnt/locust
#       command: -f /mnt/locust/locustfile.py --master -H http://master:8089
#       # command: -f /mnt/locust/locustfile.py --master -H http://127.0.0.1:8100

#   worker:
#       image: locustio/locust:master
#       volumes:
#         - ./locust:/mnt/locust
#       command: -f /mnt/locust/locustfile.py --worker --master-host master

# volumes:
#   postgres_data: {}



# version: "3.9"

services:
  db:
    image: postgres:latest
    container_name: shopdb
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPORT: ${DB_PORT}
      PGHOST: ${DB_HOST}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      retries: 5
      start_period: 1s
      timeout: 10s

  web:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: eshop_web
    command: sh -c "uvicorn backend.asgi:application --host 0.0.0.0 --port ${DJANGO_PORT} --reload"
    volumes:
      - ./server:/app
    ports:
      - "${DJANGO_PORT}:${DJANGO_PORT}"
    env_file:
      - .env
    depends_on:
      - db
      - redis

  
  # Development frontend service
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: react_shop
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   ports:
  #     - "5173:5173"
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #   command: npm run dev -- --host 0.0.0.0
  #   depends_on:
  #     - web

  #Production frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_shop
    ports:
      - "${REACT_PORT}:${REACT_CONTAINER_PORT}"
    restart: unless-stopped


  redis:
    image: redis:latest
    container_name: eshop_redis
    restart: always
    ports:
      - "6380:6379"

  celery:
    build:
      context: ./server
    container_name: backend_celery_worker
    command: celery -A backend worker --loglevel=info
    volumes:
      - ./server:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis

  celery-beat:
    build:
      context: ./server
    container_name: backend_celery_beat
    command: celery -A backend beat --loglevel=info
    volumes:
      - ./server:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis

  master:
    image: locustio/locust:latest
    container_name: locust_master
    ports:
      - "8089:8089"
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py --master -H http://web:${DJANGO_PORT}

  worker:
    image: locustio/locust:latest
    container_name: locust_worker
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py --worker --master-host master
    depends_on:
      - master

volumes:
  postgres_data:
